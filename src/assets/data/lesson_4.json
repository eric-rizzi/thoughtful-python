{
  "title": "Lesson 4: Data Structures",
  "description": "Learn about the main data structures in Python: lists, tuples, dictionaries, and sets.",
  "sections": [
    {
      "kind": "Observation",
      "id": "python-lists",
      "title": "Python Lists",
      "content": "Lists are ordered collections of items that can be of different types. Lists are mutable, which means they can be changed after creation.",
      "examples": [
        {
          "id": "lists-creation",
          "title": "Creating Lists",
          "description": "Lists in Python can be created using square brackets. Items are separated by commas.",
          "code": "# Creating a list\nnumbers = [1, 2, 3, 4, 5]\nprint(numbers)\n\n# List with mixed data types\nmixed_list = [1, 'hello', 3.14, True]\nprint(mixed_list)\n\n# Empty list\nempty_list = []\nprint(empty_list)\n\n# Creating a list using the list() constructor\nconverted_list = list('Python')\nprint(converted_list)"
        },
        {
          "id": "lists-access",
          "title": "Accessing List Elements",
          "description": "You can access list elements using their index. Python uses zero-based indexing, so the first element is at index 0.",
          "code": "fruits = ['apple', 'banana', 'cherry', 'orange', 'kiwi']\n\n# Access individual elements\nprint(fruits[0])  # First element\nprint(fruits[2])  # Third element\n\n# Negative indexing (counting from the end)\nprint(fruits[-1])  # Last element\nprint(fruits[-2])  # Second-to-last element\n\n# Slicing (getting a range of elements)\nprint(fruits[1:3])    # Elements from index 1 to 2\nprint(fruits[:3])     # Elements from start to index 2\nprint(fruits[2:])     # Elements from index 2 to end\nprint(fruits[-3:-1])  # Negative slicing"
        }
      ]
    },
    {
      "kind": "Observation",
      "id": "python-dictionaries",
      "title": "Python Dictionaries",
      "content": "Dictionaries are collections of key-value pairs. They are unordered, mutable, and indexed by keys instead of positions.",
      "examples": [
        {
          "id": "dict-creation",
          "title": "Creating Dictionaries",
          "description": "Dictionaries use curly braces with key-value pairs separated by colons.",
          "code": "# Creating a dictionary\nperson = {\n    'name': 'John',\n    'age': 30,\n    'city': 'New York'\n}\nprint(person)\n\n# Empty dictionary\nempty_dict = {}\nprint(empty_dict)\n\n# Using dict() constructor\nuser = dict(username='john123', email='john@example.com', active=True)\nprint(user)"
        },
        {
          "id": "dict-access",
          "title": "Accessing Dictionary Elements",
          "description": "You can access dictionary values using their keys.",
          "code": "person = {\n    'name': 'John',\n    'age': 30,\n    'city': 'New York'\n}\n\n# Access values using keys\nprint(person['name'])\nprint(person['age'])\n\n# Using the get() method (safer if key might not exist)\nprint(person.get('city'))\nprint(person.get('country'))         # Returns None\nprint(person.get('country', 'USA'))  # Returns default value\n\n# Check if a key exists\nif 'name' in person:\n    print('Name exists in the dictionary')"
        }
      ]
    },
    {
      "kind": "Observation",
      "id": "python-sets",
      "title": "Python Sets",
      "content": "Sets are unordered collections of unique elements. They are useful for membership testing and eliminating duplicate entries.",
      "examples": [
        {
          "id": "set-creation",
          "title": "Creating Sets",
          "description": "Sets use curly braces, but without key-value pairs, just comma-separated values.",
          "code": "# Creating a set\nfruits = {'apple', 'banana', 'cherry'}\nprint(fruits)\n\n# Creating a set from a list (removes duplicates)\nnumbers = set([1, 2, 2, 3, 3, 3, 4])\nprint(numbers)\n\n# Empty set (can't use {}, as that makes an empty dictionary)\nempty_set = set()\nprint(empty_set)"
        },
        {
          "id": "set-operations",
          "title": "Set Operations",
          "description": "Sets support mathematical operations like union, intersection, and difference.",
          "code": "set1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\n\n# Union (all elements from both sets)\nprint(set1 | set2)  # or set1.union(set2)\n\n# Intersection (elements in both sets)\nprint(set1 & set2)  # or set1.intersection(set2)\n\n# Difference (elements in set1 but not in set2)\nprint(set1 - set2)  # or set1.difference(set2)\n\n# Symmetric difference (elements in either set, but not in both)\nprint(set1 ^ set2)  # or set1.symmetric_difference(set2)"
        }
      ]
    }
  ]
}