openapi: 3.0.0
info:
  title: Thoughtful Python User Progress API
  version: v1.1.0 # Version bumped
  description: API for managing user learning progress, reflections, PRIMM evaluations, and instructor views.

servers:
  - url: https://3kyvgl1ck0.execute-api.us-east-2.amazonaws.com/ # Your existing server URL
    description: API Gateway endpoint
    # Variables can be kept if you use them for different environments via tools

tags:
  - name: User Progress
    description: Operations related to student learning progress.
  - name: Student Submissions
    description: Operations for students submitting Reflections and PRIMM activities.
  - name: Instructor Portal
    description: Operations for instructors to view student data and class progress.

components:
  schemas:
    #--------------------------------------------------------------------------
    # Core Data Types
    #--------------------------------------------------------------------------
    UnitId:
      type: string
      description: "The unique identifier for a unit (e.g., 'intro_python')."
      example: "intro_python"
    LessonId: # GUID
      type: string
      format: uuid # Indicate it's a GUID/UUID
      description: "The globally unique identifier (GUID/UUID) for a lesson's content."
      example: "a1b2c3d4-e5f6-4890-8234-567890abcdef0"
    SectionId:
      type: string
      description: "The unique identifier for a section within a lesson (e.g., 'python-history')."
      example: "python-history"
    PrimmExampleId:
      type: string
      description: "Identifier for a specific PRIMM code example within a PRIMM section."
      example: "primm-greeting-output"
    IsoTimestamp:
      type: string
      format: date-time
      description: "An ISO 8601 timestamp string."
      example: "2025-06-01T10:00:00Z"
    AssessmentLevel:
      type: string
      description: The assessment level given by the AI.
      enum: [achieves, mostly, developing, insufficient]

    #--------------------------------------------------------------------------
    # User Progress Schemas
    #--------------------------------------------------------------------------
    SectionCompletionInput: # For PUT /progress request by student
      type: object
      description: Information for a single section completion event.
      required:
        - unitId
        - lessonId
        - sectionId
      properties:
        unitId:
          $ref: "#/components/schemas/UnitId"
        lessonId:
          $ref: "#/components/schemas/LessonId" # This is the Lesson GUID
        sectionId:
          $ref: "#/components/schemas/SectionId"

    BatchCompletionsInput: # Request body for PUT /progress
      type: object
      required:
        - completions
      properties:
        completions:
          type: array
          items:
            $ref: "#/components/schemas/SectionCompletionInput"
          minItems: 1
          description: "An array of section completion events."

    UserProgressResponse: # For GET /progress and response of PUT /progress
      type: object
      description: Represents the complete learning progress for a user.
      required:
        - userId
        - completion
      properties:
        userId:
          type: string # Assuming UserId is a string (e.g., from Cognito)
          description: "The unique identifier for the user."
          example: "USER#google-oauth2|1234567890"
        completion:
          type: object
          description: "A map where keys are UnitIds. Each UnitId maps to an object where keys are LessonIds (GUIDs). Each LessonId maps to an object where keys are SectionIds and values are completion timestamps."
          additionalProperties: # Represents UnitId keys
            type: object
            description: "Progress for a unit, keyed by LessonId (GUID)."
            additionalProperties: # Represents LessonId (GUID) keys
              type: object
              description: "Progress for a lesson, keyed by SectionId."
              additionalProperties: # Represents SectionId keys
                $ref: "#/components/schemas/IsoTimestamp"
        # lastUpdatedAt was removed from Pydantic model, so removed here too for consistency

    #--------------------------------------------------------------------------
    # Reflection Schemas (for Student Submissions & Instructor Views)
    #--------------------------------------------------------------------------
    ReflectionInteractionInput: # For POST /reflections/...
      type: object
      description: "Payload for a student submitting a reflection draft or final entry."
      required:
        - userTopic
        - isUserTopicPredefined
        - userCode
        - isUserCodePredefined
        - userExplanation
      properties:
        userTopic: { type: string }
        isUserTopicPredefined: { type: boolean }
        userCode: { type: string }
        isUserCodePredefined: { type: boolean }
        userExplanation: { type: string }
        isFinal: { type: boolean, default: false }
        # lessonId and sectionId are path parameters for this endpoint

    ReflectionVersionItem: # Standard item for reflections
      type: object
      description: Represents a single saved version of a reflection, including any AI feedback.
      required:
        [
          versionId,
          userId,
          lessonId,
          sectionId,
          userTopic,
          userCode,
          userExplanation,
          createdAt,
          isFinal,
        ]
      properties:
        versionId: { type: string, description: "Unique ID for this version." }
        userId: { type: string }
        lessonId: { $ref: "#/components/schemas/LessonId" } # Lesson GUID
        sectionId: { $ref: "#/components/schemas/SectionId" }
        userTopic: { type: string }
        userCode: { type: string }
        userExplanation: { type: string }
        aiFeedback: { type: string, nullable: true }
        aiAssessment:
          { $ref: "#/components/schemas/AssessmentLevel", nullable: true }
        createdAt: { $ref: "#/components/schemas/IsoTimestamp" }
        isFinal: { type: boolean }
        sourceVersionId:
          {
            type: string,
            nullable: true,
            description: "ID of the draft this final version was based on.",
          }
        finalEntryCreatedAt:
          {
            $ref: "#/components/schemas/IsoTimestamp",
            nullable: true,
            description: "Timestamp for when this was marked as final (for GSI sorting).",
          }

    ListOfReflectionDraftsResponse: # For GET /reflections/... (student's own drafts)
      type: object
      properties:
        versions:
          type: array
          items: { $ref: "#/components/schemas/ReflectionVersionItem" }
        lastEvaluatedKey: # DynamoDB LEK is an object
          type: object
          nullable: true
          additionalProperties: true

    #--------------------------------------------------------------------------
    # PRIMM Schemas (for Student Submissions & Instructor Views)
    #--------------------------------------------------------------------------
    PrimmEvaluationRequest: # For POST /primm-feedback
      type: object
      description: "Payload for submitting a user's PRIMM activity for AI evaluation."
      required:
        [
          lessonId,
          sectionId,
          primmExampleId,
          codeSnippet,
          userPredictionPromptText,
          userPredictionText,
          userPredictionConfidence,
          userExplanationText,
        ]
      properties:
        lessonId: { $ref: "#/components/schemas/LessonId" } # Lesson GUID
        sectionId: { $ref: "#/components/schemas/SectionId" }
        primmExampleId: { $ref: "#/components/schemas/PrimmExampleId" }
        codeSnippet: { type: string }
        userPredictionPromptText: { type: string }
        userPredictionText: { type: string }
        userPredictionConfidence:
          {
            type: integer,
            minimum: 1,
            maximum: 3,
            description: "1=Low, 2=Medium, 3=High",
          }
        userExplanationText: { type: string } # Renamed from userSelfCorrectionText for generality
        actualOutputSummary: { type: string, nullable: true }

    PrimmEvaluationResponse: # Response from POST /primm-feedback
      type: object
      description: "AI's evaluation of the user's PRIMM prediction and explanation."
      required: [
          aiPredictionAssessment,
          aiExplanationAssessment,
          aiOverallComment,
        ] # As per user's last definition
      properties:
        aiPredictionAssessment: { $ref: "#/components/schemas/AssessmentLevel" }
        aiExplanationAssessment: {
            $ref: "#/components/schemas/AssessmentLevel",
          } # If can be null, add nullable: true
        aiOverallComment: { type: string } # If can be null, add nullable: true

    #--------------------------------------------------------------------------
    # Instructor Portal Schemas
    #--------------------------------------------------------------------------
    InstructorStudentInfo:
      type: object
      properties:
        studentId: { type: string, description: "Student's User ID." } # e.g., USER#cognito-id
        studentName: { type: string, nullable: true }
        studentEmail: { type: string, format: email, nullable: true }

    ListOfInstructorStudentsResponse:
      type: object
      properties:
        students:
          type: array
          items: { $ref: "#/components/schemas/InstructorStudentInfo" }

    StudentUnitCompletionDataItem: # Represents one student's completion map for a given unit
      type: object
      required: [studentId, completedSectionsInUnit]
      properties:
        studentId: { type: string }
        completedSectionsInUnit: # Keys are Lesson GUIDs
          type: object
          additionalProperties: # Lesson GUID
            type: object
            additionalProperties: # Section ID -> Timestamp
              $ref: "#/components/schemas/IsoTimestamp"

    ClassUnitProgressResponse: # For GET /instructor/units/{unitId}/class-progress
      type: object
      required: [unitId, studentProgressData]
      properties:
        unitId: { $ref: "#/components/schemas/UnitId" }
        studentProgressData:
          type: array
          items: { $ref: "#/components/schemas/StudentUnitCompletionDataItem" }

    # For instructor viewing a student's learning entries (reflections)
    StudentLearningEntriesResponse:
      type: object
      properties:
        entries: # List of ReflectionVersionItem (can include drafts and final)
          type: array
          items: { $ref: "#/components/schemas/ReflectionVersionItem" }
        lastEvaluatedKey:
          { type: object, nullable: true, additionalProperties: true }

    # For instructor viewing a student's PRIMM submissions (as stored in DDB)
    StoredPrimmSubmissionItem:
      type: object
      description: "A stored PRIMM submission including user inputs and AI evaluation."
      # Properties should match what's stored in PrimmSubmissionsTable
      # This includes fields from PrimmEvaluationRequest and PrimmEvaluationResponse, plus metadata
      required:
        [
          userId,
          submissionCompositeKey,
          lessonId,
          sectionId,
          primmExampleId,
          timestampIso,
          codeSnippet,
          userPredictionPromptText,
          userPredictionText,
          userPredictionConfidence,
          aiPredictionAssessment,
          aiExplanationAssessment,
          aiOverallComment,
          createdAt,
        ]
      properties:
        userId: { type: string }
        submissionCompositeKey:
          {
            type: string,
            description: "Sort Key: LessonGUID#SectionID#PrimmExampleID#TimestampISO",
          }
        lessonId: { $ref: "#/components/schemas/LessonId" }
        sectionId: { $ref: "#/components/schemas/SectionId" }
        primmExampleId: { $ref: "#/components/schemas/PrimmExampleId" }
        timestampIso:
          {
            $ref: "#/components/schemas/IsoTimestamp",
            description: "Timestamp of the PRIMM submission event.",
          }
        codeSnippet: { type: string }
        userPredictionPromptText: { type: string }
        userPredictionText: { type: string }
        userPredictionConfidence: { type: integer }
        actualOutputSummary: { type: string, nullable: true }
        userExplanationText: { type: string, nullable: true }
        aiPredictionAssessment: { $ref: "#/components/schemas/AssessmentLevel" }
        aiExplanationAssessment: {
            $ref: "#/components/schemas/AssessmentLevel",
            nullable: true,
          } # Allow null if no explanation
        aiOverallComment: { type: string, nullable: true }
        createdAt:
          {
            $ref: "#/components/schemas/IsoTimestamp",
            description: "Timestamp of when this record was saved.",
          }

    StudentPrimmSubmissionsResponse:
      type: object
      properties:
        submissions:
          type: array
          items: { $ref: "#/components/schemas/StoredPrimmSubmissionItem" }
        lastEvaluatedKey:
          { type: object, nullable: true, additionalProperties: true }

    #--------------------------------------------------------------------------
    # Reusable Error and Response Components
    #--------------------------------------------------------------------------
    ErrorResponse: # Standard error response
      type: object
      required: [message]
      properties:
        message: { type: string }
        type:
          {
            type: string,
            nullable: true,
            description: "Specific error type/code, e.g., for throttling.",
          }
        details: { type: object, nullable: true, additionalProperties: true }

  securitySchemes:
    BearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }

  responses: # Common responses
    BadRequest:
      description: "Bad Request (e.g., invalid input, missing fields)."
      content:
        {
          application/json:
            { schema: { $ref: "#/components/schemas/ErrorResponse" } },
        }
    Unauthorized:
      description: "Unauthorized (e.g., missing, invalid, or expired authentication token)."
      content:
        {
          application/json:
            { schema: { $ref: "#/components/schemas/ErrorResponse" } },
        }
    Forbidden:
      description: "Forbidden (e.g., authenticated user does not have permission)."
      content:
        {
          application/json:
            { schema: { $ref: "#/components/schemas/ErrorResponse" } },
        }
    NotFound:
      description: "Resource not found."
      content:
        {
          application/json:
            { schema: { $ref: "#/components/schemas/ErrorResponse" } },
        }
    InternalServerError:
      description: "Internal Server Error."
      content:
        {
          application/json:
            { schema: { $ref: "#/components/schemas/ErrorResponse" } },
        }
    TooManyRequests:
      description: "Rate limit exceeded. Too many requests."
      content:
        {
          application/json:
            { schema: { $ref: "#/components/schemas/ErrorResponse" } },
        }

security:
  - BearerAuth: []

paths:
  # === User Progress ===
  /progress:
    get:
      summary: Get Authenticated User's Full Progress
      operationId: getUserProgress
      tags: ["User Progress"]
      responses:
        "200":
          description: Successfully retrieved user progress.
          content:
            {
              application/json:
                {
                  schema: { $ref: "#/components/schemas/UserProgressResponse" },
                },
            }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      summary: Update Authenticated User's Progress
      description: Records section completions. Expects unitId, lessonId (GUID), and sectionId for each completion.
      operationId: updateUserProgress
      tags: ["User Progress"]
      requestBody:
        required: true
        content:
          {
            application/json:
              {
                schema: { $ref: "#/components/schemas/BatchCompletionsInput" },
              },
          }
      responses:
        "200":
          description: Progress updated. Returns new full progress state.
          content:
            {
              application/json:
                {
                  schema: { $ref: "#/components/schemas/UserProgressResponse" },
                },
            }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  # === Student Submissions (Reflections & PRIMM) ===
  /reflections/{lessonId}/sections/{sectionId}:
    parameters:
      - name: lessonId
        in: path
        required: true
        description: "The GUID of the lesson."
        schema: { $ref: "#/components/schemas/LessonId" }
      - name: sectionId
        in: path
        required: true
        description: "The ID of the reflection section."
        schema: { $ref: "#/components/schemas/SectionId" }
    post:
      summary: Submit or Update a Reflection
      operationId: createOrFinalizeReflection
      tags: ["Student Submissions"]
      requestBody:
        required: true
        content:
          {
            application/json:
              {
                schema:
                  { $ref: "#/components/schemas/ReflectionInteractionInput" },
              },
          }
      responses:
        "201": # Or 200 if updating
          description: Reflection version created/updated.
          content:
            {
              application/json:
                {
                  schema:
                    { $ref: "#/components/schemas/ReflectionVersionItem" },
                },
            }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      summary: Get Student's Draft Versions for a Reflection Section
      description: Retrieves all saved non-final draft versions for a specific reflection section for the authenticated user.
      operationId: getStudentReflectionDraftVersions
      tags: ["Student Submissions"]
      responses:
        "200":
          description: List of reflection draft versions.
          content:
            {
              application/json:
                {
                  schema:
                    {
                      $ref: "#/components/schemas/ListOfReflectionDraftsResponse",
                    },
                },
            }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /learning-entries: # Student's own final learning entries
    get:
      summary: Get Authenticated Student's Finalized Learning Entries
      operationId: getStudentFinalizedLearningEntries
      tags: ["Student Submissions"]
      parameters: # For pagination
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: lastEvaluatedKey
          in: query
          schema:
            {
              type: string,
              description: "URL-encoded JSON string of the LastEvaluatedKey object.",
            }
      responses:
        "200":
          description: List of student's finalized learning entries.
          content:
            application/json: # Reusing ListOfFinalLearningEntriesResponse
              schema:
                type: object # Explicitly define here or reference. For now, explicit.
                properties:
                  entries:
                    type: array
                    items:
                      { $ref: "#/components/schemas/ReflectionVersionItem" }
                  lastEvaluatedKey:
                    { type: object, nullable: true, additionalProperties: true }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /primm-feedback: # Student submitting their PRIMM work for AI eval
    post:
      summary: Submit PRIMM Analysis for AI Evaluation
      operationId: submitPrimmForEvaluation # Changed from submitPrimmAnalysisForEvaluation
      tags: ["Student Submissions"]
      requestBody:
        required: true
        content:
          {
            application/json:
              {
                schema: { $ref: "#/components/schemas/PrimmEvaluationRequest" },
              },
          }
      responses:
        "200":
          description: "AI evaluation received successfully."
          content:
            {
              application/json:
                {
                  schema:
                    { $ref: "#/components/schemas/PrimmEvaluationResponse" },
                },
            }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": # If AI service is down
          description: "AI evaluation service unavailable."
          content:
            {
              application/json:
                { schema: { $ref: "#/components/schemas/ErrorResponse" } },
            }

  # === Instructor Portal Endpoints ===
  /instructor/students:
    get:
      summary: Get List of Instructor's Permitted Students
      operationId: getInstructorStudents
      tags: ["Instructor Portal"]
      responses:
        "200":
          description: A list of students the instructor can view.
          content:
            {
              application/json:
                {
                  schema:
                    {
                      $ref: "#/components/schemas/ListOfInstructorStudentsResponse",
                    },
                },
            }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /instructor/units/{unitId}/class-progress:
    get:
      summary: Get Class Progress Data for a Unit
      description: Retrieves raw completion data for all permitted students for a specific unit. Client calculates percentages.
      operationId: getInstructorClassUnitProgressData # Renamed for clarity
      tags: ["Instructor Portal"]
      parameters:
        - name: unitId
          in: path
          required: true
          schema: { $ref: "#/components/schemas/UnitId" }
      responses:
        "200":
          description: Unit-specific completion data for students.
          content:
            {
              application/json:
                {
                  schema:
                    { $ref: "#/components/schemas/ClassUnitProgressResponse" },
                },
            }
        "401": { $ref: "#/components/responses/Unauthorized" }
        # 403 if instructor tries to access a unit they shouldn't? (Less likely here)
        "404": { $ref: "#/components/responses/NotFound" } # If unitId is invalid
        "500": { $ref: "#/components/responses/InternalServerError" }

  /instructor/students/{studentId}/learning-entries:
    get:
      summary: Get a Specific Student's Learning Entries (Reflections)
      operationId: getInstructorStudentLearningEntries
      tags: ["Instructor Portal"]
      parameters:
        - name: studentId
          in: path
          required: true
          schema: { type: string, description: "The User ID of the student." }
        - name: filter
          in: query
          required: false
          description: "Filter by 'final', 'drafts', or 'all'. Default 'all'."
          schema: { type: string, enum: [all, final, drafts] }
        - name: lessonIdGuid # Optional filter by Lesson GUID
          in: query
          required: false
          schema: { $ref: "#/components/schemas/LessonId" }
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: lastEvaluatedKey
          in: query
          schema:
            {
              type: string,
              description: "URL-encoded JSON string of the LastEvaluatedKey.",
            }
      responses:
        "200":
          description: List of the student's learning entries.
          content:
            {
              application/json:
                {
                  schema:
                    {
                      $ref: "#/components/schemas/StudentLearningEntriesResponse",
                    },
                },
            }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /instructor/students/{studentId}/primm-submissions:
    get:
      summary: Get a Specific Student's PRIMM Submissions
      operationId: getInstructorStudentPrimmSubmissions
      tags: ["Instructor Portal"]
      parameters:
        - name: studentId
          in: path
          required: true
          schema: { type: string }
        - name: lessonIdGuid # Filter by Lesson GUID
          in: query
          required: false
          schema: { $ref: "#/components/schemas/LessonId" }
        - name: sectionId # Filter by local Section ID (within a lesson)
          in: query
          required: false
          schema: { $ref: "#/components/schemas/SectionId" }
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: lastEvaluatedKey
          in: query
          schema:
            {
              type: string,
              description: "URL-encoded JSON string of the LastEvaluatedKey.",
            }
      responses:
        "200":
          description: List of the student's PRIMM submissions.
          content:
            {
              application/json:
                {
                  schema:
                    {
                      $ref: "#/components/schemas/StudentPrimmSubmissionsResponse",
                    },
                },
            }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  # Deprecated/Removed (or not implemented for now)
  # /instructor/students/{studentId}/units/{unitId}/progress - Handled by client using data from /instructor/units/{unitId}/class-progress
  # /instructor/units/{unitId}/class-summary - Client calculates this for now
