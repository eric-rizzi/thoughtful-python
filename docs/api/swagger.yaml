openapi: 3.0.0
info:
  title: Thoughtful Python User Progress API
  version: v1.0.0
  description: API for managing and tracking user learning progress and reflections in the Thoughtful Python application.

servers:
  - url: https://3kyvgl1ck0.execute-api.us-east-2.amazonaws.com/
    description: API Gateway endpoint
    variables:
      your-api-gateway-id:
        default: placeholder_id
        description: Your actual API Gateway ID.
      region:
        default: us-east-2
        description: The AWS region where your API Gateway is deployed.
      stage:
        default: prod
        description: The deployment stage of your API.

tags:
  - name: Progress
    description: Operations related to user learning progress.
  - name: Reflections & Learning Entries
    description: Operations related to user reflections and finalized journal entries.
  - name: PRIMM Feedback
    description: Operations related to AI evaluation of PRIMM activities.

components:
  schemas:
    #--------------------------------------------------------------------------
    # Data Structures
    #--------------------------------------------------------------------------
    SectionCompletionInput:
      type: object
      description: Tuple of "completion" information that the client sends the server
      required:
        - lessonId
        - sectionId
      properties:
        lessonId:
          type: string
          description: "The unique identifier for the lesson (e.g., '00_intro/lesson_1')."
          example: "00_intro/lesson_1"
        sectionId:
          type: string
          description: "The unique identifier for the section within the lesson (e.g., 'python-history')."
          example: "python-history"

    BatchCompletionsInput:
      type: object
      required:
        - completions
      properties:
        completions:
          type: array
          items:
            $ref: "#/components/schemas/SectionCompletionInput"
          minItems: 1
          description: "An array of section completion events."

    UserProgress: # Renamed from UserProgressResponse for consistency if it's the primary progress object
      type: object
      description: Represents the complete learning progress for a user.
      properties:
        userId:
          type: string
          description: "The unique identifier for the user (matches authentication ID)."
          example: "google-oauth2|12345678901234567890"
        completion:
          type: object
          description: A map where keys are lesson IDs. Each lesson ID maps to an object where keys are section IDs and values are the ISO 8601 timestamp strings of when the section was first completed.
          additionalProperties:
            type: object
            description: A map where keys are section IDs and values are their completion timestamps.
            additionalProperties:
              type: string
              format: date-time
              description: The ISO 8601 timestamp string indicating when the section was first completed.
      required:
        - userId
        - completion

    AssessmentLevel:
      type: string
      description: The assessment level given by the AI.
      enum:
        - achieves
        - mostly
        - developing
        - insufficient

    ReflectionInteractionInput:
      type: object
      required:
        - userTopic
        - userCode
        - userExplanation
      properties:
        userTopic:
          type: string
        userCode:
          type: string
        userExplanation:
          type: string
        isFinal: # Optional, defaults to false on server if not provided
          type: boolean
          description: Set to true if this submission is intended as a final learning entry.
          default: false

    ReflectionVersionItem:
      type: object
      description: Represents a single saved version of a reflection, including AI feedback.
      required:
        - versionId
        - userId
        - lessonId
        - sectionId
        - userTopic
        - userCode
        - userExplanation
        - aiFeedback
        - aiAssessment
        - createdAt
        - isFinal
      properties:
        versionId:
          type: string
          format: uuid # Or a timestamp-based unique ID
          description: Unique identifier for this version of the reflection.
          example: "v_1685000000000_abc123"
        userId:
          type: string
          description: Identifier of the user.
        lessonId:
          type: string
          description: Identifier for the lesson.
        sectionId:
          type: string
          description: Identifier for the reflection section within the lesson.
        userTopic:
          type: string
          description: The topic of the reflection submission.
        userCode:
          type: string
          description: The code submitted by the user for this version.
        userExplanation:
          type: string
          description: The explanation submitted by the user for this version.
        aiFeedback:
          type: string
          nullable: true # To allow null if isFinal is true
          description: Feedback provided by the AI for this version's content (primarily for drafts).
        aiAssessment:
          $ref: "#/components/schemas/AssessmentLevel"
          nullable: true # To allow null if isFinal is true
        createdAt:
          type: string
          format: date-time
          description: Timestamp when this version was created.
        isFinal:
          type: boolean
          description: Flag indicating if this version has been marked as final.
          default: false

    ListOfReflectionDraftsResponse:
      type: object
      description: A list of all saved draft versions (isFinal: false) for a specific reflection section.
      required:
        - versions
        - lastEvaluatedKey
      properties:
        versions:
          type: array
          items:
            $ref: "#/components/schemas/ReflectionVersionItem" # Server filters to return only items where isFinal is false.
        lastEvaluatedKey:
          type: string
          nullable: true # If null, nothing left to pull from server

    ListOfFinalLearningEntriesResponse:
      type: object
      description: A list of all finalized learning entries for the user (these are ReflectionVersionItems where isFinal=true).
      required:
        - entries
        - lastEvaluatedKey
      properties:
        entries:
          type: array
          items:
            $ref: "#/components/schemas/ReflectionVersionItem" # Server filters to return only items where isFinal is true.
        lastEvaluatedKey:
          type: string
          nullable: true # If null, nothing left to pull from server

    PrimmEvaluationRequest:
      type: object
      description: "Payload for submitting a user's PRIMM activity (prediction and self-correction) for AI evaluation."
      required:
        - lessonId
        - sectionId
        - primmExampleId
        - codeSnippet
        - userPredictionPromptText
        - userPredictionText
        - userPredictionConfidence
        - userExplanationText
      properties:
        lessonId:
          type: string
          description: "Identifier for the lesson containing the PRIMM section."
          example: "01_strings/lesson_1"
        sectionId:
          type: string
          description: "Identifier for the PRIMM section within the lesson."
          example: "primm-print-analysis"
        primmExampleId:
          type: string
          description: "Identifier for the specific PRIMM code example within the section."
          example: "primm-greetings-line3"
        codeSnippet:
          type: string
          description: "The Python code snippet the user analyzed. This provides context to the AI."
          example: "name = \"Alex\"\nprint(f\"Hello {name} it's nice to meet you!\")"
        userPredictionPromptText:
          type: string
          description: "The exact prompt or question shown to the user that elicited their initial prediction."
          example: "Look closely at Line 3 (`print(f\"Hello {name} it's nice to meet you!\")`). What exact text will this line output?"
        userPredictionText:
          type: string
          description: "The user's initial English prediction of what the code will do."
          example: "The code will print a greeting to Alex, including his name, and handle the apostrophe correctly."
        userPredictionConfidence:
          type: integer
          format: int32 
          minimum: 1
          maximum: 3 # (e.g., 1-3 for Low/Medium/High)
          description: "User's self-reported confidence in their initial prediction (e.g., 1=Low, 3=High)."
          example: 3
        userExplanationText:
          type: string
          description: "The user's explanation of their prediction error, or a deeper explanation of why the code behaved as it did."
          example: "My initial prediction was correct. The f-string substitutes the variable 'name', and using double quotes for the string allows the single quote in 'it's' to be included without error."
        actualOutputSummary:
          type: string
          nullable: true
          description: "A brief summary of the actual output observed by the user after running the code client-side. This field is optional and helps the AI compare prediction to outcome."
          example: "Output was: Hello Alex it's nice to meet you!"

    PrimmEvaluationResponse:
      type: object
      description: "AI's evaluation of the user's PRIMM prediction and self-correction."
      required:
        - aiPredictionAssessment
        - aiExplanationAssessment
        - aiOverallComment
      properties:
        aiPredictionAssessment:
          $ref: "#/components/schemas/AssessmentLevel"
        aiExplanationAssessment:
          $ref: "#/components/schemas/AssessmentLevel"
        aiOverallComment:
          type: string
          description: "Optional overall comments, encouragement, or summary from the AI."
          example: "Great job on this PRIMM exercise! Your analytical skills are developing well."

    #--------------------------------------------------------------------------
    # General Error Schema
    #--------------------------------------------------------------------------
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
        errorCode:
          type: string
          nullable: true
          description: An optional internal error code.
        details:
          type: object
          nullable: true
          additionalProperties: true
          description: Optional additional error details.

  #--------------------------------------------------------------------------
  # Security Schemes
  #--------------------------------------------------------------------------
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# Global security requirement (can be overridden at the operation level)
security:
  - BearerAuth: []

#--------------------------------------------------------------------------
# API Paths and Operations
#--------------------------------------------------------------------------
paths:
  #--- Progress Endpoints (Existing) ---
  /progress:
    get:
      summary: Get User Progress
      description: Retrieves the authenticated user's complete learning progress. This is considered the ground truth.
      operationId: getUserProgress
      tags:
        - Progress
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved user progress.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProgress"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    put:
      summary: Update User Progress (Record Section Completion)
      description: |
        Records one or more section completions for the authenticated user.
        The server will perform a merge/union operation with existing progress,
        ensuring that completions are additive and a user's progress does not go backwards.
        This endpoint can be used for single completions or for syncing a batch of offline actions
        (including claimed anonymous progress).
      operationId: updateUserProgress
      tags:
        - Progress
      security:
        - BearerAuth: []
      requestBody:
        required: true
        description: An array of section completions to record.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchCompletionsInput"
      responses:
        "200":
          description: Progress successfully updated. Returns the new, complete progress state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProgress"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /reflections/{lessonId}/sections/{sectionId}:
    parameters:
      - { name: lessonId, in: path, required: true, schema: { type: string } }
      - { name: sectionId, in: path, required: true, schema: { type: string } }
    post: # Handles both draft creation with AI feedback AND final submission
      summary: Create Reflection Draft or Final Entry
      description: |
        If `isFinal` in the request is false (or absent), submits content for AI feedback and saves a new draft version (`isFinal: false`).
        If `isFinal` is true, submits the content as a new final learning entry (`isFinal: true`),
        potentially referencing a `sourceVersionId` (or server finds the latest draft) for context.
        The final entry itself will have null for its direct `aiFeedback` and `aiAssessment`.
      operationId: createOrFinalizeReflection
      tags: ["Reflections & Learning Entries"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReflectionInteractionInput"
      responses:
        "201":
          description: Reflection item (draft or final) created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReflectionVersionItem"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { description: "Source draft version not found (if isFinal=true and previous version not found).", content: { "application/json": { schema: { $ref: "#/components/schemas/ErrorResponse" }}}}
        "500": { $ref: "#/components/responses/InternalServerError" }
    get: # For fetching history of drafts for a particular reflection section
      summary: Get All Draft Versions of a Reflection
      description: Retrieves all saved draft versions (isFinal=false) for a specific reflection section for the authenticated user.
      operationId: getReflectionDraftVersions
      tags: ["Reflections & Learning Entries"]
      responses:
        "200":
          description: Successfully retrieved reflection draft versions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfReflectionDraftsResponse"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" } # If section itself or user has no drafts
        "500": { $ref: "#/components/responses/InternalServerError" }

  /learning-entries:
    get:
      summary: Get All Finalized Learning Entries
      description: Retrieves all learning entries marked as final for the authenticated user, enriched with qualifying AI feedback from their respective source drafts.
      operationId: getFinalizedLearningEntries
      tags: ["Reflections & Learning Entries"]
      responses:
        "200":
          description: Successfully retrieved finalized learning entries.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfFinalLearningEntriesResponse"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }


  /primm-feedback: # Using this path as an example
    post:
      summary: Submit PRIMM Analysis for AI Evaluation
      description: |
        Submits a user's textual prediction about a given code snippet, 
        and optionally their self-correction explanation after they have run the code and observed its actual behavior.
        Returns an AI-generated evaluation, typically including ratings for prediction specificity and self-correction quality.
        This endpoint is subject to throttling.
      operationId: submitPrimmAnalysisForEvaluation # Changed for clarity
      tags:
        - "PRIMM Feedback"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        description: "The PRIMM submission details including the code snippet, user's prediction, and self-correction text."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrimmEvaluationRequest"
      responses:
        "200": # Using 200 OK for a successful evaluation response from the AI
          description: "AI evaluation received successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrimmEvaluationResponse"
        "400": 
          $ref: "#/components/responses/BadRequest" # For invalid request payload
        "401": 
          $ref: "#/components/responses/Unauthorized" # If token is missing or invalid
        "429": 
          description: "Rate limit exceeded for PRIMM evaluations. The user has made too many requests in a given timeframe."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse" 
              examples:
                userMinuteLimit:
                  value:
                    message: "Too many PRIMM evaluation requests. Please try again in a minute."
                    details: { "type": "PRIMM_USER_MINUTE_LIMIT" } # Example detail
                userDailyLimit:
                  value:
                    message: "You have reached your daily limit for PRIMM evaluations."
                    details: { "type": "PRIMM_USER_DAILY_LIMIT" }
                globalDailyLimit:
                  value:
                    message: "The PRIMM evaluation service is currently experiencing high demand. Please try again later."
                    details: { "type": "PRIMM_GLOBAL_DAILY_LIMIT" }
        "500": 
          $ref: "#/components/responses/InternalServerError" # General server error
        "503": 
          description: "AI ChatBot service unavailable or timed out during PRIMM evaluation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "The AI evaluation service is temporarily unavailable. Please try again later."

components: # Moved reusable responses here for clarity
  responses:
    BadRequest:
      description: Bad Request (e.g., invalid input or missing fields).
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    InternalServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
