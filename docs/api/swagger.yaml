openapi: 3.0.0
info:
  title: Thoughtful Python User Progress API
  version: v1.0.0
  description: API for managing and tracking user learning progress in the Thoughtful Python application.

servers:
  - url: https://{your-api-gateway-id}.execute-api.{region}.amazonaws.com/{stage}
    description: API Gateway endpoint
    variables:
      your-api-gateway-id:
        default: placeholder_id
        description: Your actual API Gateway ID.
      region:
        default: us-east-1 # Or your AWS region
        description: The AWS region where your API Gateway is deployed.
      stage:
        default: prod # Or dev, staging, etc.
        description: The deployment stage of your API.

components:
  schemas:
    #--------------------------------------------------------------------------
    # Data Structures
    #--------------------------------------------------------------------------
    SectionCompletionInput:
      type: object
      required:
        - lessonId
        - sectionId
      properties:
        lessonId:
          type: string
          description: "The unique identifier for the lesson (e.g., '00_intro/lesson_1')."
          example: "00_intro/lesson_1"
        sectionId:
          type: string
          description: "The unique identifier for the section within the lesson (e.g., 'python-history')."
          example: "python-history"

    UserProgress:
      type: object
      description: Represents the complete learning progress for a user.
      properties:
        userId:
          type: string
          description: "The unique identifier for the user (matches authentication ID)."
          example: "google-oauth2|12345678901234567890"
        completion:
          type: object
          description: "A map where keys are lessonIds and values are arrays of completed sectionIds."
          additionalProperties:
            type: array
            items:
              type: string
              description: "A sectionId that has been completed."
          example:
            "00_intro/lesson_1": ["python-history", "print-function"]
            "01_strings/lesson_2": ["primm-type-error", "problem2-task-fix-error"]
        penaltyEndTime:
          type: integer
          format: int64 # Unix timestamp in milliseconds
          nullable: true
          description: "Timestamp indicating when a temporary penalty (e.g., for wrong quiz answers) ends. Null if no active penalty."
          example: 1678886400000
        lastSyncedClientTimestamp: # Optional: Client can send its last known sync time
          type: integer
          format: int64
          nullable: true
          description: "Client's timestamp of its last known state, useful for conflict resolution or delta updates (advanced)."
        lastModifiedServerTimestamp: # Server will set this
          type: string
          format: date-time
          readOnly: true
          description: "The timestamp when this progress state was last updated on the server."

    BatchCompletionsInput:
      type: object
      required:
        - completions
      properties:
        completions:
          type: array
          items:
            $ref: '#/components/schemas/SectionCompletionInput'
          minItems: 1
          description: "An array of section completion events."

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
        errorCode:
          type: string
          nullable: true
          description: An optional internal error code.
        details:
          type: object
          nullable: true
          additionalProperties: true
          description: Optional additional error details.

  #--------------------------------------------------------------------------
  # Security Schemes
  #--------------------------------------------------------------------------
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Assuming you'll use the Google ID Token or a token derived from it

# Global security requirement (can be overridden at the operation level)
security:
  - BearerAuth: []

#--------------------------------------------------------------------------
# API Paths and Operations
#--------------------------------------------------------------------------
paths:
  /progress:
    get:
      summary: Get User Progress
      description: Retrieves the authenticated user's complete learning progress. This is considered the ground truth.
      operationId: getUserProgress
      tags:
        - Progress
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProgress'
        '401':
          description: Unauthorized. Token is missing, invalid, or expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User progress not found (e.g., new user with no server-side record yet). Could also return 200 with empty progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' # Or a specific "NotFound" schema
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update User Progress (Record Section Completion)
      description: |
        Records one or more section completions for the authenticated user.
        The server will perform a merge/union operation with existing progress,
        ensuring that completions are additive and a user's progress does not go backwards.
        This endpoint can be used for single completions or for syncing a batch of offline actions
        (including claimed anonymous progress).
      operationId: updateUserProgress
      tags:
        - Progress
      security:
        - BearerAuth: []
      requestBody:
        required: true
        description: An array of section completions to record.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCompletionsInput' # Using batch for flexibility
      responses:
        '200':
          description: Progress successfully updated. Returns the new, complete progress state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProgress'
        '400':
          description: Bad Request - The input data is invalid (e.g., malformed, missing required fields).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# Note: If you want separate endpoints for single vs. batch, you can add:
#  /progress/section:
#    post: ... (for single SectionCompletionInput)
# But using a batch endpoint (PUT /progress with BatchCompletionsInput) is often flexible enough.
# I've chosen PUT for /progress to signify updating the entire conceptual "progress resource" for the user,
# even if it's through partial updates. POST to a sub-resource like /progress/completions could also work.